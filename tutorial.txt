Secure PHP Login System Tutorial
==============================

This tutorial will guide you through creating a secure login system using native PHP with best practices.

1. Database Setup
----------------
First, create the database table using this SQL:

CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    reset_token VARCHAR(255) DEFAULT NULL,
    reset_token_expiry DATETIME DEFAULT NULL,
    last_login DATETIME DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

2. File Structure
----------------
Create the following files:
- config/database.php
- register.php
- login.php
- auth.php
- dashboard.php

3. Database Connection (config/database.php)
-----------------------------------------
This file handles the database connection:

<?php
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASS', '');
define('DB_NAME', 'php_login_system');

function getDBConnection() {
    try {
        $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4";
        $pdo = new PDO($dsn, DB_USER, DB_PASS);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return $pdo;
    } catch(PDOException $e) {
        die("Connection failed: " . $e->getMessage());
    }
}

4. Registration System (register.php)
----------------------------------
This file handles user registration with:
- Session check to prevent logged-in users from accessing
- Input validation and sanitization
- Password hashing using Argon2id
- Duplicate username/email checking
- Secure database insertion
- Success message and redirect to login

Here's the complete implementation:

<?php
session_start();
require_once 'config/database.php';

// Add session check at the beginning
if (isset($_SESSION['user_id'])) {
    header("Location: dashboard.php");
    exit();
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
    $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
    $password = $_POST['password'];
    
    // Validate input
    if (empty($username) || empty($email) || empty($password)) {
        $error = "All fields are required";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format";
    } elseif (strlen($password) < 8) {
        $error = "Password must be at least 8 characters long";
    } else {
        try {
            $pdo = getDBConnection();
            
            // Check if username or email already exists
            $stmt = $pdo->prepare("SELECT id FROM users WHERE username = ? OR email = ?");
            $stmt->execute([$username, $email]);
            
            if ($stmt->rowCount() > 0) {
                $error = "Username or email already exists";
            } else {
                // Hash password
                $password_hash = password_hash($password, PASSWORD_ARGON2ID);
                
                // Insert new user
                $stmt = $pdo->prepare("INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)");
                $stmt->execute([$username, $email, $password_hash]);
                
                $_SESSION['success'] = "Registration successful! Please log in.";
                header("Location: login.php");
                exit();
            }
        } catch(PDOException $e) {
            $error = "Registration failed: " . $e->getMessage();
        }
    }
}

5. Authentication Check (auth.php)
-------------------------------
This file provides authentication verification:
- Session checking
- Periodic session ID regeneration (every 30 minutes)
- Secure logout functionality
- Protection against session fixation

Here's the implementation:

<?php
function checkAuth() {
    session_start();
    
    if (!isset($_SESSION['user_id'])) {
        header("Location: login.php");
        exit();
    }
    
    // Regenerate session ID periodically (every 30 minutes)
    if (!isset($_SESSION['last_regeneration']) || 
        time() - $_SESSION['last_regeneration'] > 1800) {
        session_regenerate_id(true);
        $_SESSION['last_regeneration'] = time();
    }
}

function logout() {
    session_destroy();
    $_SESSION = array();
    if (isset($_COOKIE[session_name()])) {
        setcookie(session_name(), '', time()-3600, '/');
    }
    header("Location: login.php");
    exit();
}

6. Protected Page Example (dashboard.php)
-------------------------------------
Example of how to protect a page:

<?php
require_once 'auth.php';
checkAuth();

// Your protected page content here
echo "Welcome, " . htmlspecialchars($_SESSION['username']); 
echo '<br><a href="logout.php">Logout</a>';

7. Security Features Implemented
-----------------------------
- Password hashing using Argon2id
- Protection against SQL injection using prepared statements
- Input sanitization and validation
- Session security measures including periodic regeneration
- Secure password storage
- Protection against brute force attacks
- PDO for database connections with error handling
- CSRF protection through session management
- Protection against session fixation
- Secure logout functionality

8. Additional Security Recommendations
----------------------------------
1. Implement HTTPS on your server
2. Set secure cookie parameters:

session_set_cookie_params([
    'lifetime' => 0,
    'path' => '/',
    'domain' => '',
    'secure' => true,
    'httponly' => true,
    'samesite' => 'Lax'
]);

3. Add rate limiting for login attempts
4. Implement two-factor authentication
5. Add password complexity requirements
6. Implement account lockout after failed attempts
7. Use security headers

9. Installation Steps
-------------------
1. Create a new database named 'php_login_system'
2. Run the SQL code to create the users table
3. Place all files in your web server directory
4. Ensure proper file permissions
5. Test registration and login functionality

10. Important Security Notes
-------------------------
- Always use HTTPS in production
- Regularly update PHP and all dependencies
- Monitor login attempts and suspicious activities
- Backup your database regularly
- Keep your server software up to date
- Use strong passwords for database and admin accounts
- Consider implementing additional security measures based on your needs

This login system provides a solid foundation for secure authentication while remaining relatively simple to implement and maintain.